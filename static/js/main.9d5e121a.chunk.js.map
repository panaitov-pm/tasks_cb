{"version":3,"sources":["Context/Tasks/TasksStore.tsx","Helper/Pluralization.ts","View/Section/Tasks/TaskCount.tsx","Context/Tasks/TasksContext.tsx","Context/Tasks/withTasks.tsx","View/Section/Tasks/AddButton.tsx","View/Section/Tasks/TaskInfo.tsx","Helper/Storage/saveItem.ts","View/Modules/Icon/ImgIcon.tsx","View/Section/Tasks/RemoveButton.tsx","View/Modules/Modal/MainModal.tsx","Helper/Object/setObjectItem.ts","Helper/Error/hasError.ts","View/Section/Tasks/Modal/TaskModal.tsx","View/Modules/Animation/Fade.tsx","View/Section/Tasks/Task.tsx","View/Section/Tasks/TaskList.tsx","Helper/Storage/getItem.ts","View/Section/Tasks/index.tsx","serviceWorker.ts","index.tsx"],"names":["TaskActions","Pluralization","number","title","Math","abs","titles","split","needTitle","pluralizationTitle","TaskCount","count","pluralization","TasksContext","createContext","tasks","addTask","editTask","removeTask","withTasks","Component","props","Consumer","memo","onClick","className","type","classNames","aria-label","x","y","viewBox","d","TaskInfo","setIsOpenTaskModal","useMemo","length","setItem","key","value","localStorage","reducer","prevState","action","ADD_TASK","task","EDIT_TASK","map","id","REMOVE_TASK","filter","taskId","TasksStore","children","getDefaultProps","useContext","useReducer","dispatch","state","JSON","stringify","Provider","defaultProps","src","alt","ariaHideApp","overlayClassName","bodyOpenClassName","closeTimeoutMS","setObjectItem","odj","odjItem","hasError","errors","Object","values","some","undefined","TaskModal","closeTaskModal","useState","taskInfo","setTaskInfo","isError","setIsError","useEffect","isOpen","onSubmit","event","newTask","preventDefault","getTaskAction","data-dismiss","aria-hidden","autoComplete","noValidate","htmlFor","placeholder","name","onChange","target","required","description","form","Fade","delay","showNode","setShowNode","setTimeout","CSSTransition","in","timeout","Task","index","isFirstRender","isOpenTaskModal","getAnimationDelay","onRequestClose","TaskList","setFirstRender","getItem","byDefault","item","parse","uuidV4","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8LAaYA,E,wDCIGC,EAZO,SAACC,EAAgBC,GACnCD,EAASE,KAAKC,IAAIH,GAElB,IAAMI,EAASH,EAAMI,MAAM,KAErBC,EAAYF,EAAQJ,EAAS,IAAM,GAAKA,EAAS,IAAM,GAAM,EADrD,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GACgDA,EAAS,GAAK,EAAKA,EAAS,GAAK,IAEzGO,EAAwBD,GAAyBF,EAAO,GAE9D,OAAQG,GAA2C,ICOxCC,EANoB,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,MAClC,OAAQA,EAAQ,GACZ,wCAAI,IAAKA,EAAO,IAAKC,EAAcD,EAAO,gBCSnCE,EAVMC,wBAAiC,CAClDC,MAAO,GACPC,QAAS,aAETC,SAAU,aAEVC,WAAY,eCRDC,EANG,SAAuBC,GAAvB,OAA+E,SAACC,GAAD,OAC7F,gBAAC,EAAaC,SAAd,MACK,SAAAP,GAAK,OAAI,gBAACK,EAAD,iBAAeC,EAAWN,S,gBCqB7BQ,kBAnBoB,SAAC,GAAwC,IAAtCpB,EAAqC,EAArCA,MAAOqB,EAA8B,EAA9BA,QAASC,EAAqB,EAArBA,UAClD,OACI,4BACIC,KAAK,SACLD,UAAWE,IAAW,yCAA0C,CAACF,IACjEG,aAAYzB,EACZqB,QAASA,GAET,8BAAOrB,GAEP,yBAAKsB,UAAU,gBAAgBI,EAAE,MAAMC,EAAE,MAAMC,QAAQ,aACnD,0BAAMC,EAAE,qQCgBTC,EAtBmBd,GAAU,YAAyC,IAAtCJ,EAAqC,EAArCA,MAAOmB,EAA8B,EAA9BA,mBAClD,OAAOC,mBAAQ,kBACX,4BAAQV,UAAU,qBACd,yBAAKA,UAAU,+BACX,yBAAKA,UAAU,8BACX,wBAAIA,UAAU,oBAAd,aACc,kBAAC,EAAD,CAAWd,MAAOI,EAAMqB,WAG1C,yBAAKX,UAAU,8BACX,kBAAC,EAAD,CACIA,UAAU,qBACVtB,MAAM,aACNqB,QAAS,kBAAMU,GAAmB,WAMnD,CAACnB,EAAMqB,Y,eC1BCC,EANC,SAACC,EAAaC,IACrBD,GAAQC,IAEbC,aAAaH,QAAQC,EAAKC,K,SPMlBvC,K,oBAAAA,E,sBAAAA,E,2BAAAA,M,KAoBZ,IAAMyC,EAA8C,SAACC,EAAWC,GAC5D,OAAQA,EAAOjB,MACX,KAAK1B,EAAY4C,SACb,OAAO,eACAF,EADP,CAEI3B,MAAM,GAAD,mBACE2B,EAAU3B,OADZ,CAED4B,EAAOE,SAGnB,KAAK7C,EAAY8C,UACb,OAAO,eACAJ,EADP,CAEI3B,MAAO2B,EAAU3B,MAAMgC,KAAI,SAAAF,GACvB,OAAIA,EAAKG,KAAOL,EAAOE,KAAKG,GAAWH,EAEhC,eACAA,EADP,GAEOF,EAAOE,WAI1B,KAAK7C,EAAYiD,YACb,OAAO,eACAP,EADP,CAEI3B,MAAO2B,EAAU3B,MAAMmC,QAAO,SAAAL,GAAI,OAAIA,EAAKG,KAAOL,EAAOQ,YAEjE,QACI,OAAOT,IAUbU,EAA8B,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,gBAEvCvC,EAAQwC,qBAA8B1C,GAFuB,EAIzC2C,qBAAWf,EAAD,eAC7B1B,EAD6B,CAGhCC,QAAS,SAAC6B,GAAD,OAAiBY,EAAS,CAAE/B,KAAM1B,EAAY4C,SAAUC,UACjE5B,SAAU,SAAC4B,GAAD,OAAiBY,EAAS,CAAE/B,KAAM1B,EAAY8C,UAAWD,UACnE3B,WAAY,SAACiC,GAAD,OAAoBM,EAAS,CAAE/B,KAAM1B,EAAYiD,YAAaE,aAEvEG,MAX4D,mBAI5DI,EAJ4D,KAIrDD,EAJqD,KAgBnE,OAFApB,EAAQ,QAASsB,KAAKC,UAAUF,EAAM3C,QAGlC,kBAAC,EAAa8C,SAAd,CAAuBtB,MAAK,eAAOmB,EAAP,GAAiBJ,MACxCD,IAKbD,EAAWU,aAAe,CACtBR,gBAAiB,iBAAO,KAGbF,QQ5EA7B,kBATkB,SAAC,GAA6B,IAA3BwC,EAA0B,EAA1BA,IAAKC,EAAqB,EAArBA,IAAKvC,EAAgB,EAAhBA,UAC1C,OACI,uBACIA,UAAWE,IAAW,WAAY,CAACF,IACnCsC,IAAKA,EACLC,IAAKA,OCkBFzC,kBAhBuB,SAAC,GAAwC,IAAtCpB,EAAqC,EAArCA,MAAOqB,EAA8B,EAA9BA,QAASC,EAAqB,EAArBA,UACrD,OACI,4BACIC,KAAK,SACLD,UAAWE,IAAW,oDAAqD,CAACF,IAC5EG,aAAYzB,EACZqB,QAASA,GAET,kBAAC,EAAD,CACIuC,IAAI,oBACJC,IAAK7D,Q,wBCCNoB,G,MAAAA,gBAb6B,SAAC,GAAD,IAAG8B,EAAH,EAAGA,SAAahC,EAAhB,mCACxC,kBAAC,IAAD,eACI4C,aAAa,EACbC,iBAAiB,aACjBzC,UAAU,eACV0C,kBAAkB,aAClBC,eAAgB,KACZ/C,GAEHgC,OCjBMgB,EALO,SAAIC,EAAQC,GAAZ,sBACfD,EADe,GAEfC,ICKQC,EARE,SAAIC,GACjB,OAAOC,OAAOC,OAAOF,GAAQG,MAAK,SAAArC,GAC9B,OAAc,OAAVA,QAA2BsC,IAATtC,GAEE,IAAjBA,EAAMH,WC6IN0C,EA1HoB3D,GAAU,YAAgF,IAA7EhB,EAA4E,EAA5EA,MAAO0C,EAAqE,EAArEA,KAAMF,EAA+D,EAA/DA,OAAQ3B,EAAuD,EAAvDA,QAASC,EAA8C,EAA9CA,SAAU8D,EAAoC,EAApCA,eAAmB1D,EAAiB,iFAExF2D,mBAASnC,GAF+E,mBAEjHoC,EAFiH,KAEvGC,EAFuG,OAG1FF,oBAAS,GAHiF,mBAGjHG,EAHiH,KAGxGC,EAHwG,KAMxHC,qBAAU,WAGN,OAFAhE,EAAMiE,QAAUJ,EAAYrC,GAErB,kBAAMuC,GAAW,MACzB,CAACvC,EAAMxB,EAAMiE,SAMhB,IAcMC,EAAW,SAACC,EAAmCC,GACjDD,EAAME,iBACFlB,EAAgBS,GAChBG,GAAW,KAjBG,SAACzC,EAAqB8C,GACpC9C,IAAW3C,EAAY4C,UACvB5B,EAAQyE,GAGR9C,IAAW3C,EAAY8C,WACvB7B,EAASwE,GAebE,CAAchD,EAAQ8C,GAEtBL,GAAW,GAEXL,MAGJ,OAAO5C,mBAAQ,kBACX,gBAAC,EACOd,EAEJ,uBAAKI,UAAU,iBACX,uBAAKA,UAAU,gBACX,sBAAIA,UAAU,eAAetB,GAC7B,0BACIqB,QAASuD,EACTrD,KAAK,SAASD,UAAU,QAAQmE,eAAa,QAAQhE,aAAW,SAChE,wBAAMiE,cAAY,QAAlB,UAGR,uBAAKpE,UAAU,cACX,wBACIqE,aAAa,MACbP,SAAU,SAACC,GAAD,OAAWD,EAASC,EAAOP,IACrCxD,UAAWE,IAAW,GAAI,CACtB,gBAAiBwD,IAErBnC,GAAG,YACH+C,YAAY,GACZ,uBAAKtE,UAAU,cACX,yBAAOuE,QAAQ,YAAYvE,UAAU,kBAArC,SACA,yBACIC,KAAK,OACLD,UAAU,eACVuB,GAAG,YACHiD,YAAY,aACZ1D,MAAO0C,EAASiB,KAChBC,SAAU,YAAiB,IAAdC,EAAa,EAAbA,OACTlB,EAAYb,EAAcY,EAAU,CAAEiB,KAAME,EAAO7D,UAEvD8D,UAAU,IAEd,uBAAK5E,UAAU,oBAAf,iCAIJ,uBAAKA,UAAU,cACX,yBAAOuE,QAAQ,mBAAmBvE,UAAU,kBAA5C,gBACA,4BACIA,UAAU,eACVuB,GAAG,mBACHiD,YAAY,oBACZ1D,MAAO0C,EAASqB,YAChBH,SAAU,YAAiB,IAAdC,EAAa,EAAbA,OACTlB,EAAYb,EAAcY,EAAU,CAAEqB,YAAaF,EAAO7D,UAE9D8D,UAAU,IAEd,uBAAK5E,UAAU,oBAAf,0CAMZ,uBAAKA,UAAU,gBACX,0BACIC,KAAK,SACLD,UAAU,oBACVD,QAASuD,GAHb,UAOA,0BACIrD,KAAK,SACL6E,KAAK,YACL9E,UAAU,mBAHd,aAUb,CAACJ,EAAOlB,EAAOgF,O,QC/GPqB,EAvBe,SAAC,GAAoC,IAAlCnD,EAAiC,EAAjCA,SAAUoD,EAAuB,EAAvBA,MAAOhF,EAAgB,EAAhBA,UAAgB,EAC9BuD,oBAAS,GADqB,mBACvD0B,EADuD,KAC7CC,EAD6C,KAY9D,OATAtB,qBAAU,WAMN,OAJAuB,YAAW,WACPD,GAAY,KACbF,GAEI,kBAAME,GAAY,MAC1B,IAGC,kBAACE,EAAA,EAAD,CACIC,GAAIJ,EACJK,QAAS,IACTpF,WAAYF,GAEX4B,ICmCE2D,EA5Ce7F,GAAU,YAAsD,IAAnD0B,EAAkD,EAAlDA,KAAMoE,EAA4C,EAA5CA,MAAOC,EAAqC,EAArCA,cAAehG,EAAsB,EAAtBA,WAAsB,EAC3C8D,oBAAS,GADkC,mBAClFmC,EADkF,KACjEjF,EADiE,KAKzF,OAEI,oCACI,kBAAC,EAAD,CAAMuE,MALY,SAACS,GAAD,OAAmBA,EAAwB,GAARD,EAAa,EAKrDG,CAAkBF,GAAgBzF,UAAU,aACrD,yBAAKA,UAAU,8BACX,yBAAKA,UAAU,iCAAgC,8BAAOwF,EAAP,MAC/C,yBAAKxF,UAAU,iCACX,kBAAC,EAAD,CACIsC,IAAI,sBACJC,IAAI,UAGZ,yBACIvC,UAAU,gEACVD,QAAS,kBAAMU,GAAmB,KAEjCW,EAAKqD,MAEV,yBAAKzE,UAAU,6DAA6DoB,EAAKyD,aACjF,yBAAK7E,UAAU,iCACX,kBAAC,EAAD,CACItB,MAAM,SACNqB,QAAS,kBAAMN,EAAW2B,EAAKG,UAK/C,kBAAC,EAAD,CACIsC,OAAQ6B,EACRhH,MAAM,YACN0C,KAAMA,EACNF,OAAQ3C,EAAY8C,UACpBuE,eAAgB,kBAAMnF,GAAmB,IACzC6C,eAAgB,kBAAM7C,GAAmB,UCT1CoF,EAjCmBnG,GAAU,YAAyC,IAAtCJ,EAAqC,EAArCA,MAAqC,KAA9BmB,mBAEV8C,oBAAS,IAF+B,mBAEzEkC,EAFyE,KAE1DK,EAF0D,KAQhF,OAJAlC,qBAAU,WACNkC,GAAe,KAChB,IAEIpF,mBAAQ,kBACX,0BAAMV,UAAU,SACZ,kBAAC,EAAD,CAAMgF,MAAO,IAAKhF,UAAU,WACxB,yBAAKA,UAAU,qCACX,yBAAKA,UAAU,iCAAf,KACA,yBAAKA,UAAU,kCACf,yBAAKA,UAAU,qBAAf,QACA,yBAAKA,UAAU,6CAAf,eACA,yBAAKA,UAAU,iCAAf,YAIJV,EAAMgC,KAAI,SAACF,EAAaoE,GAAd,OACN,kBAAC,EAAD,CACIC,cAAeA,EACf5E,IAAKO,EAAKG,GACVH,KAAMA,EACNoE,MAAOA,EAAQ,UAKhC,CAAClG,OCnCOyG,EAPC,SAAClF,EAAamF,GAC1B,IAAMC,EAAOlF,aAAagF,QAAQlF,GAClC,OAAKoF,EAEE/D,KAAKgE,MAAMD,GAFAD,GCkDPlG,kBAnCgB,WAAO,IAAD,EAEayD,oBAAS,GAFtB,mBAE1BmC,EAF0B,KAETjF,EAFS,KAIjC,OACI,yBAAKT,UAAU,uBACX,kBAAC,EAAD,CACI6B,gBAAiB,iBAAO,CAAEvC,MAAOyG,EAAQ,QAAS,OAElD,kBAAC,EAAD,CAAMf,MAAO,EAAGhF,UAAU,WACtB,kBAAC,EAAD,CACIS,mBAAoBA,KAG5B,kBAAC,EAAD,CACIA,mBAAoBA,IAExB,kBAAC,EAAD,CACIoD,OAAQ6B,EACRhH,MAAM,WACNwC,OAAQ3C,EAAY4C,SACpBC,KAAM,CACFG,GAAI4E,MACJ1B,KAAM,GACNI,YAAa,IAEjBe,eAAgB,kBAAMnF,GAAmB,IACzC6C,eAAgB,kBAAM7C,GAAmB,WCrCzC2F,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAAWC,SAASC,eAAe,cDoI7C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9d5e121a.chunk.js","sourcesContent":["import React, { Reducer, useContext, useReducer } from 'react';\n\nimport TasksContext, { TasksContextProps } from './TasksContext';\nimport ITask from '../../Types/Tasks/Task';\nimport setItem from '../../Helper/Storage/saveItem';\n\n/**\n * @interface Props\n */\ninterface Props {\n    getDefaultProps: () => Partial<TasksContextProps>;\n}\n\nexport enum TaskActions {\n    ADD_TASK = 'ADD_TASK',\n    EDIT_TASK = 'EDIT_TASK',\n    REMOVE_TASK = 'REMOVE_TASK',\n}\n\n/**\n * @interface Action\n */\ninterface Action {\n    type: string;\n    task?: ITask;\n    taskId?: string;\n}\n\n/**\n * @param {TasksContextProps} prevState\n * @param {Action} action\n * @return {TasksContextProps}\n */\nconst reducer: Reducer<TasksContextProps, Action> = (prevState, action): TasksContextProps => {\n    switch (action.type) {\n        case TaskActions.ADD_TASK:\n            return {\n                ...prevState,\n                tasks: [\n                    ...prevState.tasks,\n                    action.task\n                ],\n            };\n        case TaskActions.EDIT_TASK:\n            return {\n                ...prevState,\n                tasks: prevState.tasks.map(task => {\n                    if (task.id !== action.task.id) return task;\n\n                    return {\n                        ...task,\n                        ...action.task,\n                    };\n                }),\n            };\n        case TaskActions.REMOVE_TASK:\n            return {\n                ...prevState,\n                tasks: prevState.tasks.filter(task => task.id !== action.taskId)\n            };\n        default:\n            return prevState;\n    }\n};\n\n/**\n * @param {React.ReactElement<any, string | React.JSXElementConstructor<any>> | string | number | {} | React.ReactNodeArray | React.ReactPortal | boolean | null | undefined} children\n * @param {() => Partial<TasksContextProps>} getDefaultProps\n * @return {any}\n * @constructor\n */\nconst TasksStore: React.FC<Props> = ({ children, getDefaultProps }) => {\n\n    const tasks = useContext<TasksContextProps>(TasksContext);\n\n    const [state, dispatch] = useReducer(reducer, {\n        ...tasks,\n\n        addTask: (task: ITask) => dispatch({ type: TaskActions.ADD_TASK, task }),\n        editTask: (task: ITask) => dispatch({ type: TaskActions.EDIT_TASK, task }),\n        removeTask: (taskId: string) => dispatch({ type: TaskActions.REMOVE_TASK, taskId }),\n\n        ...getDefaultProps(),\n    });\n\n    setItem('tasks', JSON.stringify(state.tasks));\n\n    return (\n        <TasksContext.Provider value={{ ...state, ...getDefaultProps() }}>\n            {children}\n        </TasksContext.Provider>\n    );\n};\n\nTasksStore.defaultProps = {\n    getDefaultProps: () => ({}),\n};\n\nexport default TasksStore;\n","/**\n * @param {number} number\n * @param {string} title\n * @return {string}\n */\nconst Pluralization = (number: number, title: string): string => {\n    number = Math.abs(number);\n\n    const titles = title.split('|');\n    const cases = [2, 0, 1, 1, 1, 2];\n    const needTitle = titles[(number % 100 > 4 && number % 100 < 20) ? 2 : cases[(number % 10 < 5) ? number % 10 : 5]];\n\n    const pluralizationTitle = (!!needTitle) ? needTitle : titles[1];\n\n    return (pluralizationTitle) ? pluralizationTitle : '';\n};\n\nexport default Pluralization;\n","import React from 'react';\nimport pluralization from '../../../Helper/Pluralization';\n\n/**\n * @interface Props\n */\ninterface Props {\n    count: number;\n}\n\n/**\n * @param {number} count\n * @return {any}\n * @constructor\n */\nconst TaskCount: React.FC<Props> = ({ count }): any => {\n    return (count > 0) && (\n        <>/{' '}{count}{' '}{pluralization(count, 'item|items')}</>\n    );\n};\n\nexport default TaskCount;\n","import { createContext } from 'react';\nimport ITask from '../../Types/Tasks/Task';\n\n/**\n * @interface TasksContextProps\n */\nexport interface TasksContextProps {\n    tasks: ITask[];\n    addTask: (task: ITask) => void;\n    editTask: (task: ITask) => void;\n    removeTask: (id: string) => void;\n}\n\n/**\n * @type {React.Context<TasksContextProps>}\n */\nconst TasksContext = createContext<TasksContextProps>({\n    tasks: [],\n    addTask: () => {\n    },\n    editTask: () => {\n    },\n    removeTask: () => {\n    },\n});\n\nexport default TasksContext;\n","import * as React from 'react';\nimport { ComponentType } from 'react';\nimport TasksContext, { TasksContextProps } from './TasksContext';\n\n/**\n * @param {React.ComponentType<Props & TasksContextProps>} Component\n * @return {(props: Props) => any}\n */\nconst withTasks = <Props extends object>(Component: ComponentType<Props & TasksContextProps>) => (props: Props) => (\n    <TasksContext.Consumer>\n        {tasks => <Component {...props} {...tasks} />}\n    </TasksContext.Consumer>\n);\n\nexport default withTasks;\n","import React, { memo } from 'react';\nimport classNames from 'classnames';\n\n/**\n * @interface Props\n */\ninterface Props {\n    title: string;\n    onClick: () => void;\n    className?: string;\n}\n\nconst AddButton: React.FC<Props> = ({ title, onClick, className }): any => {\n    return (\n        <button\n            type=\"button\"\n            className={classNames('d-flex align-items-center btn btn-icon', [className])}\n            aria-label={title}\n            onClick={onClick}\n        >\n            <span>{title}</span>\n\n            <svg className=\"img-icon ml-2\" x=\"0px\" y=\"0px\" viewBox=\"0 0 52 52\">\n                <path d=\"M26,0C11.664,0,0,11.663,0,26s11.664,26,26,26s26-11.663,26-26S40.336,0,26,0z M38.5,28H28v11c0,1.104-0.896,2-2,2\n\ts-2-0.896-2-2V28H13.5c-1.104,0-2-0.896-2-2s0.896-2,2-2H24V14c0-1.104,0.896-2,2-2s2,0.896,2,2v10h10.5c1.104,0,2,0.896,2,2\n\tS39.604,28,38.5,28z\" />\n            </svg>\n        </button>\n    );\n};\n\nexport default memo(AddButton);\n","import React, { useMemo } from 'react';\n\nimport TaskCount from './TaskCount';\nimport withTasks from '../../../Context/Tasks/withTasks';\nimport AddButton from './AddButton';\n\n/**\n * @interface Props\n */\ninterface Props {\n    setIsOpenTaskModal: (isOpen: boolean) => void\n}\n\n/**\n * @return {any}\n * @constructor\n */\nconst TaskInfo: React.FC<Props> = withTasks(({ tasks, setIsOpenTaskModal }): any => {\n    return useMemo(() => (\n        <header className=\"task-info mb-md-5\">\n            <div className=\"row justify-content-between\">\n                <div className=\"col-xs p-3 pt-md-5 pl-md-4\">\n                    <h5 className=\"task-info__title\">\n                        Task list <TaskCount count={tasks.length} />\n                    </h5>\n                </div>\n                <div className=\"col-xs p-3 pt-md-5 pr-md-4\">\n                    <AddButton\n                        className=\"p-0 task-info__btn\"\n                        title=\"Create new\"\n                        onClick={() => setIsOpenTaskModal(true)}\n                    />\n\n                </div>\n            </div>\n        </header>\n    ), [tasks.length]);\n});\n\nexport default TaskInfo;\n","/**\n * @param {string} key\n * @param {string} value\n */\nconst setItem = (key: string, value: string) => {\n    if (!key && !value) return;\n\n    localStorage.setItem(key, value);\n};\n\nexport default setItem;\n","import * as React from 'react';\nimport { memo } from 'react';\nimport classNames from 'classnames';\n\n/**\n * @interface Props\n */\ninterface Props {\n    src: string;\n    alt: string;\n    className?: string;\n}\n\nconst ImgIcon: React.FC<Props> = ({ src, alt, className }) => {\n    return (\n        <img\n            className={classNames('img-icon', [className])}\n            src={src}\n            alt={alt} />\n    );\n};\n\nexport default memo(ImgIcon);\n","import React, { memo } from 'react';\nimport ImgIcon from '../../Modules/Icon/ImgIcon';\nimport classNames from 'classnames';\n\n/**\n * @interface Props\n */\ninterface Props {\n    title: string;\n    onClick: () => void;\n    className?: string;\n}\n\n/**\n * @param {string} title\n * @param {() => void} onClick\n * @param {string | undefined} className\n * @return {any}\n * @constructor\n */\nconst RemoveButton: React.FC<Props> = ({ title, onClick, className }): any => {\n    return (\n        <button\n            type=\"button\"\n            className={classNames('d-inline-flex align-items-center btn btn-icon p-0', [className])}\n            aria-label={title}\n            onClick={onClick}\n        >\n            <ImgIcon\n                src=\"/icons/remove.png\"\n                alt={title}\n            />\n        </button>\n    );\n};\n\nexport default memo(RemoveButton);\n","import React, { memo } from 'react';\nimport ReactModal from 'react-modal';\n\nimport '../../../scss/modules/modal.scss'\n\n/**\n * @interface MainModalProps\n */\nexport interface MainModalProps extends ReactModal.Props {\n\n}\n\n/**\n * @param {React.ReactElement<any, string | React.JSXElementConstructor<any>> | string | number | {} | React.ReactNodeArray | React.ReactPortal | boolean | null | undefined} children\n * @param {Pick<MainModalProps & {children?: React.ReactNode}, \"isOpen\" | \"style\" | \"portalClassName\" | \"bodyOpenClassName\" | \"htmlOpenClassName\" | \"className\" | \"overlayClassName\" | \"appElement\" | \"onAfterOpen\" | \"onAfterClose\" | \"onRequestClose\" | \"closeTimeoutMS\" | \"ariaHideApp\" | \"shouldFocusAfterRender\" | \"shouldCloseOnOverlayClick\" | \"shouldCloseOnEsc\" | \"shouldReturnFocusAfterClose\" | \"parentSelector\" | \"aria\" | \"data\" | \"role\" | \"contentLabel\" | \"contentRef\" | \"overlayRef\" | \"testId\">} props\n * @return {any}\n * @constructor\n */\nconst MainModal: React.FC<MainModalProps> = ({ children, ...props }) => (\n    <ReactModal\n        ariaHideApp={false}\n        overlayClassName=\"modal show\"\n        className=\"modal-dialog\"\n        bodyOpenClassName=\"modal-open\"\n        closeTimeoutMS={500}\n        {...props}\n    >\n        {children}\n    </ReactModal>\n);\n\nexport default memo(MainModal);\n","/**\n * @param {T} odj\n * @param {Partial<T>} odjItem\n * @return {T}\n */\nconst setObjectItem = <T>(odj: T, odjItem: Partial<T>): T => ({\n    ...odj,\n    ...odjItem,\n});\n\nexport default setObjectItem;\n","/**\n * @param {T} errors\n * @return {boolean}\n */\nconst hasError = <T>(errors: T): boolean => {\n    return Object.values(errors).some(value => {\n        if (value === null || value=== undefined) return true;\n\n        return value.length === 0\n    })\n};\n\nexport default hasError;\n","import * as React from 'react';\nimport { FormEvent, useEffect, useMemo, useState } from 'react';\nimport classNames from 'classnames';\nimport ITask from '../../../../Types/Tasks/Task';\nimport MainModal, { MainModalProps } from '../../../Modules/Modal/MainModal';\nimport setObjectItem from '../../../../Helper/Object/setObjectItem';\nimport withTasks from '../../../../Context/Tasks/withTasks';\nimport hasError from '../../../../Helper/Error/hasError';\nimport { TaskActions } from '../../../../Context/Tasks/TasksStore';\n\n/**\n * @interface Props\n */\ninterface Props extends MainModalProps {\n    title: string;\n    task: ITask;\n    action: Partial<TaskActions>;\n    closeTaskModal: () => void;\n}\n\n/**\n * @param {string} title\n * @param {ITask} task\n * @param {Pick<Props & {children?: React.ReactNode}, \"isOpen\" | \"style\" | \"portalClassName\" | \"bodyOpenClassName\" | \"htmlOpenClassName\" | \"className\" | \"overlayClassName\" | \"appElement\" | \"onAfterOpen\" | \"onAfterClose\" | \"onRequestClose\" | \"closeTimeoutMS\" | \"ariaHideApp\" | \"shouldFocusAfterRender\" | \"shouldCloseOnOverlayClick\" | \"shouldCloseOnEsc\" | \"shouldReturnFocusAfterClose\" | \"parentSelector\" | \"aria\" | \"data\" | \"role\" | \"contentLabel\" | \"contentRef\" | \"overlayRef\" | \"testId\" | \"children\">} props\n * @return {any}\n * @constructor\n */\nconst TaskModal: React.FC<Props> = withTasks(({ title, task, action, addTask, editTask, closeTaskModal, ...props }): any => {\n\n    const [taskInfo, setTaskInfo] = useState(task);\n    const [isError, setIsError] = useState(false);\n\n    // Set modal Task if props Task was changed during opening modal window\n    useEffect(() => {\n        props.isOpen && setTaskInfo(task);\n\n        return () => setIsError(false);\n    }, [task, props.isOpen]);\n\n    /**\n     * @param {TaskActions} action\n     * @param {ITask} newTask\n     */\n    const getTaskAction = (action: TaskActions, newTask: ITask) => {\n        if (action === TaskActions.ADD_TASK) {\n            addTask(newTask);\n        }\n\n        if (action === TaskActions.EDIT_TASK) {\n            editTask(newTask)\n        }\n    };\n\n    /**\n     * @param {React.FormEvent<HTMLFontElement>} event\n     * @param newTask\n     */\n    const onSubmit = (event: FormEvent<HTMLFormElement>, newTask: ITask): void => {\n        event.preventDefault();\n        if (hasError<ITask>(taskInfo)) {\n            setIsError(true);\n            return;\n        }\n\n        getTaskAction(action, newTask);\n\n        setIsError(false);\n\n        closeTaskModal();\n    };\n\n    return useMemo(() => (\n        <MainModal\n            {...props}\n        >\n            <div className=\"modal-content\">\n                <div className=\"modal-header\">\n                    <h5 className=\"modal-title\">{title}</h5>\n                    <button\n                        onClick={closeTaskModal}\n                        type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                        <span aria-hidden=\"true\">&times;</span>\n                    </button>\n                </div>\n                <div className=\"modal-body\">\n                    <form\n                        autoComplete=\"off\"\n                        onSubmit={(event) => onSubmit(event, taskInfo)}\n                        className={classNames('', {\n                            'was-validated': isError\n                        })}\n                        id=\"task-form\"\n                        noValidate={true}>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"task-name\" className=\"col-form-label\">Name:</label>\n                            <input\n                                type=\"text\"\n                                className=\"form-control\"\n                                id=\"task-name\"\n                                placeholder=\"Enter Name\"\n                                value={taskInfo.name}\n                                onChange={({ target }) => {\n                                    setTaskInfo(setObjectItem(taskInfo, { name: target.value }))\n                                }}\n                                required={true}\n                            />\n                            <div className=\"invalid-feedback\">\n                                Please provide a valid name.\n                            </div>\n                        </div>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"task-description\" className=\"col-form-label\">Description:</label>\n                            <textarea\n                                className=\"form-control\"\n                                id=\"task-description\"\n                                placeholder=\"Enter Description\"\n                                value={taskInfo.description}\n                                onChange={({ target }) => {\n                                    setTaskInfo(setObjectItem(taskInfo, { description: target.value }))\n                                }}\n                                required={true}\n                            />\n                            <div className=\"invalid-feedback\">\n                                Please provide a valid description.\n                            </div>\n                        </div>\n                    </form>\n                </div>\n                <div className=\"modal-footer\">\n                    <button\n                        type=\"button\"\n                        className=\"btn btn-secondary\"\n                        onClick={closeTaskModal}\n                    >\n                        Cancel\n                    </button>\n                    <button\n                        type=\"submit\"\n                        form=\"task-form\"\n                        className=\"btn btn-primary\"\n                    >\n                        Save\n                    </button>\n                </div>\n            </div>\n        </MainModal>\n    ), [props, title, isError]);\n});\n\nexport default TaskModal;\n","import React from 'react';\nimport { useEffect, useState } from 'react';\nimport CSSTransition from 'react-transition-group/CSSTransition';\n\n/**\n * @interface Props\n */\ninterface Props {\n    delay: number\n    className: string\n}\n\nconst Fade: React.FC<Props> = ({ children, delay, className }) => {\n    const [showNode, setShowNode] = useState(false);\n\n    useEffect(() => {\n\n        setTimeout(() => {\n            setShowNode(true);\n        }, delay);\n\n        return () => setShowNode(false);\n    }, []);\n\n    return (\n        <CSSTransition\n            in={showNode}\n            timeout={500}\n            classNames={className}\n        >\n            {children}\n        </CSSTransition>\n    );\n};\n\nexport default Fade;\n","import React, { useEffect, useState } from 'react';\nimport RemoveButton from './RemoveButton';\nimport ITask from '../../../Types/Tasks/Task';\nimport ImgIcon from '../../Modules/Icon/ImgIcon';\nimport withTasks from '../../../Context/Tasks/withTasks';\nimport TaskModal from './Modal/TaskModal';\nimport { TaskActions } from '../../../Context/Tasks/TasksStore';\nimport Fade from '../../Modules/Animation/Fade';\n\n/**\n * @interface Props\n */\ninterface Props {\n    task: ITask\n    index: number;\n    isFirstRender: boolean;\n}\n\n/**\n * @type {(props: {readonly task?: any; readonly removeTask?: any; readonly index?: any}) => any}\n */\nconst Task: React.FC<Props> = withTasks(({ task, index, isFirstRender, removeTask }): any => {\n    const [isOpenTaskModal, setIsOpenTaskModal] = useState(false);\n\n    const getAnimationDelay = (isFirstRender) => isFirstRender ? index * 50 : 0;\n\n    return (\n\n        <>\n            <Fade delay={getAnimationDelay(isFirstRender)} className=\"fade-down\">\n                <div className=\"d-flex table-row fade-down\">\n                    <div className=\"table-row__column text-center\"><span>{index}.</span></div>\n                    <div className=\"table-row__column text-center\">\n                        <ImgIcon\n                            src=\"/icons/envelope.png\"\n                            alt=\"Task\"\n                        />\n                    </div>\n                    <div\n                        className=\"table-row__column text-nowrap overflow-hidden table-row__name\"\n                        onClick={() => setIsOpenTaskModal(true)}\n                    >\n                        {task.name}\n                    </div>\n                    <div className=\"table-row__column flex-grow-1 text-nowrap overflow-hidden\">{task.description}</div>\n                    <div className=\"table-row__column text-center\">\n                        <RemoveButton\n                            title=\"Delete\"\n                            onClick={() => removeTask(task.id)}\n                        />\n                    </div>\n                </div>\n            </Fade>\n            <TaskModal\n                isOpen={isOpenTaskModal}\n                title=\"Edit Task\"\n                task={task}\n                action={TaskActions.EDIT_TASK}\n                onRequestClose={() => setIsOpenTaskModal(false)}\n                closeTaskModal={() => setIsOpenTaskModal(false)}\n            />\n        </>\n    );\n});\n\nexport default Task;\n","import React, { useEffect, useMemo, useState } from 'react';\n\nimport withTasks from '../../../Context/Tasks/withTasks';\nimport ITask from '../../../Types/Tasks/Task';\nimport Task from './Task';\nimport Fade from '../../Modules/Animation/Fade';\n\n/**\n * @interface Props\n */\ninterface Props {\n    setIsOpenTaskModal: (isOpen: boolean) => void;\n}\n\n/**\n * @type {(props: {readonly tasks?: any}) => any}\n */\nconst TaskList: React.FC<Props> = withTasks(({ tasks, setIsOpenTaskModal }): any => {\n\n    const [isFirstRender, setFirstRender] = useState(true);\n\n    useEffect(() => {\n        setFirstRender(false);\n    }, []);\n\n    return useMemo(() => (\n        <main className=\"table\">\n            <Fade delay={100} className=\"fade-up\">\n                <div className=\"d-flex font-weight-bold table-row\">\n                    <div className=\"table-row__column text-center\">#</div>\n                    <div className=\"table-row__column text-center\" />\n                    <div className=\"table-row__column\">Name</div>\n                    <div className=\"table-row__column flex-grow-1 text-nowrap\">Description</div>\n                    <div className=\"table-row__column text-center\">Delete</div>\n                </div>\n            </Fade>\n            {\n                tasks.map((task: ITask, index: number) => (\n                    <Task\n                        isFirstRender={isFirstRender}\n                        key={task.id}\n                        task={task}\n                        index={index + 1}\n                    />\n                ))\n            }\n        </main>\n    ), [tasks]);\n});\n\nexport default TaskList;\n","/**\n * @param {string} key\n * @param byDefault\n * @return {any[] | any}\n */\nconst getItem = (key: string, byDefault: any) => {\n    const item = localStorage.getItem(key);\n    if (!item) return byDefault;\n\n    return JSON.parse(item);\n};\n\nexport default getItem;\n","import React, { memo, useState } from 'react';\nimport uuidV4 from 'uuid/v4';\n\nimport TaskInfo from './TaskInfo';\nimport TasksStore, { TaskActions } from '../../../Context/Tasks/TasksStore';\nimport TaskList from './TaskList';\nimport TaskModal from './Modal/TaskModal';\nimport getItem from '../../../Helper/Storage/getItem';\nimport Fade from '../../Modules/Animation/Fade';\n\n\n/**\n * @interface Props\n */\ninterface Props {\n\n}\n\n/**\n * @return {any}\n * @constructor\n */\nconst Tasks: React.FC<Props> = () => {\n\n    const [isOpenTaskModal, setIsOpenTaskModal] = useState(false);\n\n    return (\n        <div className=\"container task-wrap\">\n            <TasksStore\n                getDefaultProps={() => ({ tasks: getItem('tasks', []) })}\n            >\n                <Fade delay={0} className=\"fade-up\">\n                    <TaskInfo\n                        setIsOpenTaskModal={setIsOpenTaskModal}\n                    />\n                </Fade>\n                <TaskList\n                    setIsOpenTaskModal={setIsOpenTaskModal}\n                />\n                <TaskModal\n                    isOpen={isOpenTaskModal}\n                    title=\"New Task\"\n                    action={TaskActions.ADD_TASK}\n                    task={{\n                        id: uuidV4(),\n                        name: '',\n                        description: ''\n                    }}\n                    onRequestClose={() => setIsOpenTaskModal(false)}\n                    closeTaskModal={() => setIsOpenTaskModal(false)}\n                />\n            </TasksStore>\n\n        </div>\n    );\n};\n\nexport default memo(Tasks);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Tasks from './View/Section/Tasks';\nimport * as serviceWorker from './serviceWorker';\n\nimport './scss/app.scss';\n\nReactDOM.render(<Tasks />, document.getElementById('task-list'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}